{"ast":null,"code":"import { setLocalStream, callStates, setCallState, setCallingDialog, setCallerUsername } from \"../../store/actions/call\";\nimport store from \"../../store/store\";\nimport { sendPreOffer, sendPreOfferAnswer } from \"../wssConnection/wssConnection\";\nconst defaultConstrains = {\n  video: true,\n  audio: true\n};\nconst preOfferAnswers = {\n  CALL_ACCEPTED: 'CALL_ACCEPTED',\n  CALL_REJECTED: 'CALL_REJECTED',\n  CALL_NOT_AVAILABLE: 'CALL_NOT_AVAILABLE'\n};\nexport const getLocalStream = () => {\n  navigator.mediaDevices.getUserMedia(defaultConstrains).then(stream => {\n    console.log({\n      stream\n    });\n    store.dispatch(setLocalStream(stream));\n    store.dispatch(setCallState(callStates.CALL_AVAILABLE));\n  }).catch(e => {\n    console.log('Error occured when user trie dto get local stream');\n    console.log(e);\n  });\n};\nlet connectedUserSocketId;\nexport const callToOther = activeUserDetails => {\n  connectedUserSocketId = activeUserDetails.socketId;\n  store.dispatch(setCallState(callStates.CALL_IN_PROGRESS));\n  store.dispatch(setCallingDialog(true));\n  sendPreOffer({\n    callee: activeUserDetails,\n    caller: {\n      username: store.getState().dashReducer.username\n    }\n  });\n};\nexport const handlePreoffer = data => {\n  if (checkIfCallIsPossible()) {\n    connectedUserSocketId = data.callerSocketId;\n    store.dispatch(setCallerUsername(data.callerUsername));\n    store.dispatch(setCallState(callStates.CALL_REQUESTED));\n  } else {\n    sendPreOfferAnswer({\n      callerSocketId: data.callerSocketId,\n      answer: preOfferAnswers.CALL_NOT_AVAILABLE\n    });\n  }\n};\nexport const acceptIncomingCallRequest = () => {\n  sendPreOfferAnswer({\n    callerSocketId: connectedUserSocketId,\n    answer: preOfferAnswers.CALL_ACCEPTED\n  });\n};\nexport const rejectIncomingCallRequest = () => {\n  sendPreOfferAnswer({\n    callerSocketId: connectedUserSocketId,\n    answer: preOfferAnswers.CALL_REJECTED\n  });\n  resetCallData();\n};\nexport const handlePreofferAnswer = data => {\n  if (data.answer === preOfferAnswers.CALL_ACCEPTED) {// Send WebRTC Offer\n  } else {\n    let rejectionReason;\n\n    if (data.answer === preOfferAnswers.CALL_NOT_AVAILABLE) {\n      rejectionReason = 'Callee is not available to pick up the call right now!';\n    } else {\n      rejectionReason = 'Callee rejected the call';\n    }\n  }\n}; // If user rejects call\n\nexport const resetCallData = () => {\n  connectedUserSocketId = null;\n  store.dispatch(setCallState(callStates.CALL_UNAVAILABLE));\n}; // Check if call is possible\n\nexport const checkIfCallIsPossible = () => {\n  if (store.getState().call.localStream === null || store.getState().callState !== callStates.CALL_AVAILABLE) {\n    return false;\n  }\n\n  return true;\n};","map":{"version":3,"sources":["/Users/macuser/Desktop/Sites/React-Projects/VideoTalker/video-talker-app/src/utils/webRTC/webRTCHandler.js"],"names":["setLocalStream","callStates","setCallState","setCallingDialog","setCallerUsername","store","sendPreOffer","sendPreOfferAnswer","defaultConstrains","video","audio","preOfferAnswers","CALL_ACCEPTED","CALL_REJECTED","CALL_NOT_AVAILABLE","getLocalStream","navigator","mediaDevices","getUserMedia","then","stream","console","log","dispatch","CALL_AVAILABLE","catch","e","connectedUserSocketId","callToOther","activeUserDetails","socketId","CALL_IN_PROGRESS","callee","caller","username","getState","dashReducer","handlePreoffer","data","checkIfCallIsPossible","callerSocketId","callerUsername","CALL_REQUESTED","answer","acceptIncomingCallRequest","rejectIncomingCallRequest","resetCallData","handlePreofferAnswer","rejectionReason","CALL_UNAVAILABLE","call","localStream","callState"],"mappings":"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","sourcesContent":["import { setLocalStream, callStates, setCallState, setCallingDialog, setCallerUsername  } from \"../../store/actions/call\";\nimport store from \"../../store/store\";\nimport { sendPreOffer, sendPreOfferAnswer } from \"../wssConnection/wssConnection\";\n\nconst defaultConstrains = {\n    video: true,\n    audio: true\n};\n\nconst preOfferAnswers = {\n    CALL_ACCEPTED: 'CALL_ACCEPTED',\n    CALL_REJECTED: 'CALL_REJECTED',\n    CALL_NOT_AVAILABLE: 'CALL_NOT_AVAILABLE'\n};\n\nexport const getLocalStream = () => {\n    navigator.mediaDevices.getUserMedia(defaultConstrains)\n    .then(stream => {\n        console.log({stream});\n        store.dispatch(setLocalStream(stream));\n        store.dispatch(setCallState(callStates.CALL_AVAILABLE));\n    })\n    .catch(e => {\n        console.log('Error occured when user trie dto get local stream');\n        console.log(e);\n    })\n};\n\nlet connectedUserSocketId;\n\nexport const callToOther = (activeUserDetails) => {\n    connectedUserSocketId =  activeUserDetails.socketId;\n    store.dispatch(setCallState(callStates.CALL_IN_PROGRESS));\n    store.dispatch(setCallingDialog(true));\n    sendPreOffer({\n        callee: activeUserDetails,\n        caller: {\n            username: store.getState().dashReducer.username\n        }\n    })\n\n};\n\nexport const handlePreoffer = (data) => {\n    if (checkIfCallIsPossible()) {\n        connectedUserSocketId = data.callerSocketId;\n        store.dispatch(setCallerUsername(data.callerUsername));\n        store.dispatch(setCallState(callStates.CALL_REQUESTED));\n    } else {\n        sendPreOfferAnswer({\n            callerSocketId: data.callerSocketId,\n            answer: preOfferAnswers.CALL_NOT_AVAILABLE\n        });\n    }\n};\n\nexport const acceptIncomingCallRequest = () => {\n    sendPreOfferAnswer({\n        callerSocketId: connectedUserSocketId,\n        answer: preOfferAnswers.CALL_ACCEPTED\n    });\n};\n\nexport const rejectIncomingCallRequest = () => {\n    sendPreOfferAnswer({\n        callerSocketId: connectedUserSocketId,\n        answer: preOfferAnswers.CALL_REJECTED\n    });\n    resetCallData();\n};\n\nexport const handlePreofferAnswer = (data) => {\n    if (data.answer === preOfferAnswers.CALL_ACCEPTED) {\n        // Send WebRTC Offer\n\n    } else {\n        let rejectionReason;\n        if(data.answer === preOfferAnswers.CALL_NOT_AVAILABLE) {\n            rejectionReason = 'Callee is not available to pick up the call right now!'\n        } else {\n            rejectionReason = 'Callee rejected the call'\n        }\n\n    }\n}\n\n// If user rejects call\nexport const resetCallData = () => {\n    connectedUserSocketId = null;\n    store.dispatch(setCallState(callStates.CALL_UNAVAILABLE))\n}\n\n// Check if call is possible\nexport const checkIfCallIsPossible = () => {\n    if(store.getState().call.localStream === null || store.getState().callState !== callStates.CALL_AVAILABLE) {\n        return false;\n    }\n    return true;\n};\n"]},"metadata":{},"sourceType":"module"}