{"ast":null,"code":"import { setLocalStream, callStates, setCallState, setCallingDialog, setCallerUsername } from \"../../store/actions/call\";\nimport store from \"../../store/store\";\nimport { sendPreOffer, sendPreOfferAnswer } from \"../wssConnection/wssConnection\";\nconst defaultConstrains = {\n  video: true,\n  audio: true\n};\nconst preOfferAnswers = {\n  CALL_ACCEPTED: \"CALL_ACCEPTED\",\n  CALL_REJECTED: \"CALL_REJECTED\",\n  CALL_NOT_AVAILABLE: \"CALL_NOT_AVAILABLE\"\n};\nexport const getLocalStream = () => {\n  navigator.mediaDevices.getUserMedia(defaultConstrains).then(stream => {\n    console.log({\n      stream\n    });\n    store.dispatch(setLocalStream(stream));\n    store.dispatch(setCallState(callStates.CALL_AVAILABLE));\n  }).catch(e => {\n    console.log(\"Error occured when user trie dto get local stream\");\n    console.log(e);\n  });\n};\nlet connectedUserSocketId;\nexport const callToOther = activeUserDetails => {\n  connectedUserSocketId = activeUserDetails.socketId;\n  store.dispatch(setCallState(callStates.CALL_IN_PROGRESS));\n  store.dispatch(setCallingDialog(true));\n  sendPreOffer({\n    callee: activeUserDetails,\n    caller: {\n      username: store.getState().dashReducer.username\n    }\n  });\n};\nexport const handlePreoffer = data => {\n  if (checkIfCallIsPossible()) {\n    connectedUserSocketId = data.callerSocketId;\n    store.dispatch(setCallerUsername(data.callerUsername));\n    store.dispatch(setCallState(callStates.CALL_REQUESTED));\n  } else {\n    sendPreOfferAnswer({\n      callerSocketId: data.callerSocketId,\n      answer: preOfferAnswers.CALL_NOT_AVAILABLE\n    });\n  }\n};\nexport const acceptIncomingCallRequest = () => {\n  sendPreOfferAnswer({\n    callerSocketId: connectedUserSocketId,\n    answer: preOfferAnswers.CALL_ACCEPTED\n  });\n};\nexport const rejectIncomingCallRequest = () => {\n  sendPreOfferAnswer({\n    callerSocketId: connectedUserSocketId,\n    answer: preOfferAnswers.CALL_REJECTED\n  });\n  resetCallData();\n};\nexport const handlePreofferAnswer = data => {\n  if (data.answer === preOfferAnswers.CALL_ACCEPTED) {// Send WebRTC Offer\n  } else {\n    let rejectionReason;\n\n    if (data.answer === preOfferAnswers.CALL_NOT_AVAILABLE) {\n      rejectionReason = \"Callee is not available to pick up the call right now!\";\n    } else {\n      rejectionReason = \"Callee rejected the call\";\n    }\n\n    store.dispatch();\n  }\n}; // If user rejects call\n\nexport const resetCallData = () => {\n  connectedUserSocketId = null;\n  store.dispatch(setCallState(callStates.CALL_UNAVAILABLE));\n}; // Check if call is possible\n\nexport const checkIfCallIsPossible = () => {\n  if (store.getState().call.localStream === null || store.getState().callState !== callStates.CALL_AVAILABLE) {\n    return false;\n  }\n\n  return true;\n};","map":{"version":3,"sources":["/Users/macuser/Desktop/Sites/React-Projects/VideoTalker/video-talker-app/src/utils/webRTC/webRTCHandler.js"],"names":["setLocalStream","callStates","setCallState","setCallingDialog","setCallerUsername","store","sendPreOffer","sendPreOfferAnswer","defaultConstrains","video","audio","preOfferAnswers","CALL_ACCEPTED","CALL_REJECTED","CALL_NOT_AVAILABLE","getLocalStream","navigator","mediaDevices","getUserMedia","then","stream","console","log","dispatch","CALL_AVAILABLE","catch","e","connectedUserSocketId","callToOther","activeUserDetails","socketId","CALL_IN_PROGRESS","callee","caller","username","getState","dashReducer","handlePreoffer","data","checkIfCallIsPossible","callerSocketId","callerUsername","CALL_REQUESTED","answer","acceptIncomingCallRequest","rejectIncomingCallRequest","resetCallData","handlePreofferAnswer","rejectionReason","CALL_UNAVAILABLE","call","localStream","callState"],"mappings":"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","sourcesContent":["import {\n  setLocalStream,\n  callStates,\n  setCallState,\n  setCallingDialog,\n  setCallerUsername,\n} from \"../../store/actions/call\";\nimport store from \"../../store/store\";\nimport {\n  sendPreOffer,\n  sendPreOfferAnswer,\n} from \"../wssConnection/wssConnection\";\n\nconst defaultConstrains = {\n  video: true,\n  audio: true,\n};\n\nconst preOfferAnswers = {\n  CALL_ACCEPTED: \"CALL_ACCEPTED\",\n  CALL_REJECTED: \"CALL_REJECTED\",\n  CALL_NOT_AVAILABLE: \"CALL_NOT_AVAILABLE\",\n};\n\nexport const getLocalStream = () => {\n  navigator.mediaDevices\n    .getUserMedia(defaultConstrains)\n    .then((stream) => {\n      console.log({ stream });\n      store.dispatch(setLocalStream(stream));\n      store.dispatch(setCallState(callStates.CALL_AVAILABLE));\n    })\n    .catch((e) => {\n      console.log(\"Error occured when user trie dto get local stream\");\n      console.log(e);\n    });\n};\n\nlet connectedUserSocketId;\n\nexport const callToOther = (activeUserDetails) => {\n  connectedUserSocketId = activeUserDetails.socketId;\n  store.dispatch(setCallState(callStates.CALL_IN_PROGRESS));\n  store.dispatch(setCallingDialog(true));\n  sendPreOffer({\n    callee: activeUserDetails,\n    caller: {\n      username: store.getState().dashReducer.username,\n    },\n  });\n};\n\nexport const handlePreoffer = (data) => {\n  if (checkIfCallIsPossible()) {\n    connectedUserSocketId = data.callerSocketId;\n    store.dispatch(setCallerUsername(data.callerUsername));\n    store.dispatch(setCallState(callStates.CALL_REQUESTED));\n  } else {\n    sendPreOfferAnswer({\n      callerSocketId: data.callerSocketId,\n      answer: preOfferAnswers.CALL_NOT_AVAILABLE,\n    });\n  }\n};\n\nexport const acceptIncomingCallRequest = () => {\n  sendPreOfferAnswer({\n    callerSocketId: connectedUserSocketId,\n    answer: preOfferAnswers.CALL_ACCEPTED,\n  });\n};\n\nexport const rejectIncomingCallRequest = () => {\n  sendPreOfferAnswer({\n    callerSocketId: connectedUserSocketId,\n    answer: preOfferAnswers.CALL_REJECTED,\n  });\n  resetCallData();\n};\n\nexport const handlePreofferAnswer = (data) => {\n  if (data.answer === preOfferAnswers.CALL_ACCEPTED) {\n    // Send WebRTC Offer\n  } else {\n    let rejectionReason;\n    if (data.answer === preOfferAnswers.CALL_NOT_AVAILABLE) {\n      rejectionReason =\n        \"Callee is not available to pick up the call right now!\";\n    } else {\n      rejectionReason = \"Callee rejected the call\";\n    }\n    store.dispatch();\n  }\n};\n\n// If user rejects call\nexport const resetCallData = () => {\n  connectedUserSocketId = null;\n  store.dispatch(setCallState(callStates.CALL_UNAVAILABLE));\n};\n\n// Check if call is possible\nexport const checkIfCallIsPossible = () => {\n  if (\n    store.getState().call.localStream === null ||\n    store.getState().callState !== callStates.CALL_AVAILABLE\n  ) {\n    return false;\n  }\n  return true;\n};\n"]},"metadata":{},"sourceType":"module"}