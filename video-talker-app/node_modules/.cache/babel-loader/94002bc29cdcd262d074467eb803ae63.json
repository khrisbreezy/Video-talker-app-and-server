{"ast":null,"code":"var _jsxFileName = \"/Users/macuser/Desktop/Sites/React-Projects/VideoTalker/video-talker-app/src/Dashboard/components/ConversationButtons/ConversationButtons.js\",\n    _s = $RefreshSig$();\n\nimport React from 'react';\nimport { useDispatch, useSelector } from 'react-redux';\nimport { MdCallEnd, MdMic, MdMicOff, MdVideocam, MdVideocamOff, MdOutlineScreenShare, MdOutlineStopScreenShare // MdVideoCall,\n// MdCamera\n} from 'react-icons/md';\nimport ConversionButton from './ConversionButton';\nimport { setLocalCameraEnabled, setLocalMicrophoneEnabled } from '../../../store/actions/call';\nimport { hangUp, switchForScreenSharingStream } from '../../../utils/webRTC/webRTCHandler';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst styles = {\n  btnContainer: {\n    display: 'flex',\n    position: 'absolute',\n    bottom: '22%',\n    left: '35%'\n  },\n  icon: {\n    width: '25px',\n    height: '25px',\n    fill: '#e6e5e8'\n  }\n};\n\nconst ConversationButtons = _ref => {\n  _s();\n\n  let {\n    localMicrophoneEnabled,\n    localCameraEnabled,\n    screenSharing\n  } = _ref;\n  const dispatch = useDispatch();\n  const localStream = useSelector(state => state.call.localStream);\n  console.log({\n    localMicrophoneEnabled\n  });\n  console.log({\n    localCameraEnabled\n  });\n  console.log({\n    localStream\n  });\n\n  const handleMicButtonHandler = () => {\n    const micEnabled = localMicrophoneEnabled;\n    localStream.getAudioTracks()[0].enabled = !micEnabled;\n    dispatch(setLocalMicrophoneEnabled(!micEnabled));\n    console.log({\n      micEnabled\n    });\n  };\n\n  const handlerCameraButtonHandler = () => {\n    const cameraEnabled = localCameraEnabled;\n    localStream.getVideoTracks()[0].enabled = !cameraEnabled;\n    dispatch(setLocalCameraEnabled(!cameraEnabled));\n    console.log({\n      cameraEnabled\n    });\n  };\n\n  const screenSharingHandler = () => {\n    switchForScreenSharingStream();\n  };\n\n  const endCallHandler = () => {\n    hangUp();\n  };\n\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    style: styles.btnContainer,\n    children: [/*#__PURE__*/_jsxDEV(ConversionButton, {\n      onClickHandler: handleMicButtonHandler,\n      children: localMicrophoneEnabled ? /*#__PURE__*/_jsxDEV(MdMic, {\n        style: styles.icon\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 71,\n        columnNumber: 43\n      }, this) : /*#__PURE__*/_jsxDEV(MdMicOff, {\n        style: styles.icon\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 71,\n        columnNumber: 75\n      }, this)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 70,\n      columnNumber: 13\n    }, this), /*#__PURE__*/_jsxDEV(ConversionButton, {\n      onClickHandler: endCallHandler,\n      children: /*#__PURE__*/_jsxDEV(MdCallEnd, {\n        style: styles.icon\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 74,\n        columnNumber: 17\n      }, this)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 73,\n      columnNumber: 13\n    }, this), /*#__PURE__*/_jsxDEV(ConversionButton, {\n      onClickHandler: handlerCameraButtonHandler,\n      children: localCameraEnabled ? /*#__PURE__*/_jsxDEV(MdVideocam, {\n        style: styles.icon\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 77,\n        columnNumber: 39\n      }, this) : /*#__PURE__*/_jsxDEV(MdVideocamOff, {\n        style: styles.icon\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 77,\n        columnNumber: 76\n      }, this)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 76,\n      columnNumber: 13\n    }, this), /*#__PURE__*/_jsxDEV(ConversionButton, {\n      onClickHandler: screenSharingHandler,\n      children: !screenSharing ? /*#__PURE__*/_jsxDEV(MdOutlineScreenShare, {\n        style: styles.icon\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 80,\n        columnNumber: 35\n      }, this) : /*#__PURE__*/_jsxDEV(MdOutlineStopScreenShare, {\n        style: styles.icon\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 80,\n        columnNumber: 82\n      }, this)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 79,\n      columnNumber: 13\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 69,\n    columnNumber: 9\n  }, this);\n};\n\n_s(ConversationButtons, \"ue739sNrMiuKvyCRbOx7ZD51Ehw=\", false, function () {\n  return [useDispatch, useSelector];\n});\n\n_c = ConversationButtons;\nexport default ConversationButtons;\n\nvar _c;\n\n$RefreshReg$(_c, \"ConversationButtons\");","map":{"version":3,"sources":["/Users/macuser/Desktop/Sites/React-Projects/VideoTalker/video-talker-app/src/Dashboard/components/ConversationButtons/ConversationButtons.js"],"names":["React","useDispatch","useSelector","MdCallEnd","MdMic","MdMicOff","MdVideocam","MdVideocamOff","MdOutlineScreenShare","MdOutlineStopScreenShare","ConversionButton","setLocalCameraEnabled","setLocalMicrophoneEnabled","hangUp","switchForScreenSharingStream","styles","btnContainer","display","position","bottom","left","icon","width","height","fill","ConversationButtons","localMicrophoneEnabled","localCameraEnabled","screenSharing","dispatch","localStream","state","call","console","log","handleMicButtonHandler","micEnabled","getAudioTracks","enabled","handlerCameraButtonHandler","cameraEnabled","getVideoTracks","screenSharingHandler","endCallHandler"],"mappings":"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","sourcesContent":["import React from 'react';\nimport { useDispatch, useSelector } from 'react-redux';\nimport {\n    MdCallEnd,\n    MdMic,\n    MdMicOff,\n    MdVideocam,\n    MdVideocamOff,\n    MdOutlineScreenShare,\n    MdOutlineStopScreenShare\n    // MdVideoCall,\n    // MdCamera\n} from 'react-icons/md';\n\nimport ConversionButton from './ConversionButton';\nimport { setLocalCameraEnabled, setLocalMicrophoneEnabled } from '../../../store/actions/call';\nimport { hangUp, switchForScreenSharingStream } from '../../../utils/webRTC/webRTCHandler';\n\nconst styles = {\n   btnContainer: {\n    display: 'flex',\n    position: 'absolute',\n    bottom: '22%',\n    left: '35%'\n   },\n   icon: {\n    width: '25px',\n    height: '25px',\n    fill: '#e6e5e8'\n   }\n};\n\n\nconst ConversationButtons = ({localMicrophoneEnabled, localCameraEnabled, screenSharing}) => {\n    const dispatch = useDispatch();\n\n    const localStream = useSelector(state => state.call.localStream);\n\n    console.log({localMicrophoneEnabled});\n    console.log({localCameraEnabled});\n\n    console.log({localStream});\n\n    const handleMicButtonHandler = () => {\n        const micEnabled = localMicrophoneEnabled;\n        localStream.getAudioTracks()[0].enabled = !micEnabled;\n        dispatch(setLocalMicrophoneEnabled(!micEnabled));\n\n        console.log({micEnabled});\n    };\n\n    const handlerCameraButtonHandler = () => {\n        const cameraEnabled = localCameraEnabled;\n        localStream.getVideoTracks()[0].enabled = !cameraEnabled;\n        dispatch(setLocalCameraEnabled(!cameraEnabled));\n\n        console.log({cameraEnabled});\n    };\n\n    const screenSharingHandler = () => {\n        switchForScreenSharingStream();\n    };\n\n    const endCallHandler = () => {\n        hangUp();\n    }\n\n    return (\n        <div style={styles.btnContainer}>\n            <ConversionButton onClickHandler={handleMicButtonHandler}>\n                {localMicrophoneEnabled ? <MdMic style={styles.icon} /> : <MdMicOff style={styles.icon} />}\n            </ConversionButton>\n            <ConversionButton onClickHandler={endCallHandler}>\n                <MdCallEnd style={styles.icon} />\n            </ConversionButton>\n            <ConversionButton onClickHandler={handlerCameraButtonHandler}>\n                {localCameraEnabled ? <MdVideocam style={styles.icon} /> : <MdVideocamOff style={styles.icon} />}\n            </ConversionButton>\n            <ConversionButton onClickHandler={screenSharingHandler}>\n                {!screenSharing ? <MdOutlineScreenShare style={styles.icon} /> : <MdOutlineStopScreenShare style={styles.icon} />}\n            </ConversionButton>\n        </div>\n    );\n};\n\nexport default ConversationButtons;"]},"metadata":{},"sourceType":"module"}