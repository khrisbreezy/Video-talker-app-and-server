{"ast":null,"code":"import { callStates, setCallState, setGroupCallActive, setGroupCallStream, clearGroupCallData } from \"../../store/actions/call\";\nimport store from \"../../store/store\";\nimport { registerGroupCall, userLeftGroupCall, userWantsToJoinGroupCall, closeGroupCallByHost } from \"../wssConnection/wssConnection\";\nlet mypeer;\nlet peerID;\nlet groupCallRoomId;\nlet groupCallHost = false;\nexport const connectWithPeer = () => {\n  mypeer = new window.Peer(undefined, {\n    path: '/peerjs',\n    host: '/',\n    port: '5000'\n  });\n  mypeer.on('open', id => {\n    peerID = id;\n    console.log(`Succesfully connected with peer server with id: ${id}`);\n  });\n  mypeer.on('call', call => {\n    call.answer(getLocalStream());\n    call.on('stream', incomingStream => {\n      console.log('Stream inconing', {\n        incomingStream\n      });\n      const streams = store.getState().call.groupStreams;\n      const stream = streams.find(stream => stream.id === incomingStream.id);\n      console.log({\n        stream\n      }, 'peer call');\n\n      if (!stream) {\n        addVideoStream(incomingStream);\n      }\n    });\n  });\n};\n\nconst getLocalStream = () => {\n  return store.getState().call.localStream;\n};\n\nexport const createGroupCall = () => {\n  groupCallHost = true;\n  registerGroupCall({\n    username: store.getState().dashReducer.username,\n    id: peerID\n  });\n  store.dispatch(setGroupCallActive(true));\n  store.dispatch(setCallState(callStates.CALL_IN_PROGRESS));\n};\nexport const joinGroupCall = (hostSocketId, roomId) => {\n  const localStream = getLocalStream();\n  groupCallRoomId = roomId;\n  userWantsToJoinGroupCall({\n    peerId: peerID,\n    hostSocketId,\n    roomId,\n    streamId: localStream.id\n  });\n  store.dispatch(setGroupCallActive(true));\n  store.dispatch(setCallState(callStates.CALL_IN_PROGRESS));\n};\nexport const connectToNewUser = data => {\n  const localStream = getLocalStream();\n  const call = mypeer.call(data.peerId, localStream);\n  call.on('stream', incomingStream => {\n    console.log({\n      incomingStream\n    });\n    const streams = store.getState().call.groupStreams;\n    const stream = streams.find(stream => stream.id === incomingStream.id);\n    console.log({\n      stream\n    }, 'call');\n\n    if (!stream) {\n      addVideoStream(incomingStream);\n    }\n  });\n};\nexport const leaveGroupCall = () => {\n  if (groupCallHost) {\n    closeGroupCallByHost({\n      peerId: peerID\n    });\n  } else {\n    userLeftGroupCall({\n      streamId: store.getState().call.localStream.id,\n      roomId: groupCallRoomId\n    });\n  }\n\n  clearGroupData();\n};\nexport const clearGroupData = () => {\n  groupCallRoomId = null;\n  groupCallHost = null;\n  store.dispatch(clearGroupCallData());\n  mypeer.destroy();\n  connectWithPeer();\n};\nexport const removeInactiveSteam = data => {\n  const groupStreams = store.getState().call.groupStreams.filter(stream => stream.id !== data.streamId);\n  store.dispatch(setGroupCallStream(groupStreams));\n};\n\nconst addVideoStream = incomingStream => {\n  let groupStreams = [...store.getState().call.groupStreams, incomingStream];\n  store.dispatch(setGroupCallStream(groupStreams));\n};","map":{"version":3,"sources":["/Users/macuser/Desktop/Sites/React-Projects/VideoTalker/video-talker-app/src/utils/webRTC/webRTCGroupCallHandler.js"],"names":["callStates","setCallState","setGroupCallActive","setGroupCallStream","clearGroupCallData","store","registerGroupCall","userLeftGroupCall","userWantsToJoinGroupCall","closeGroupCallByHost","mypeer","peerID","groupCallRoomId","groupCallHost","connectWithPeer","window","Peer","undefined","path","host","port","on","id","console","log","call","answer","getLocalStream","incomingStream","streams","getState","groupStreams","stream","find","addVideoStream","localStream","createGroupCall","username","dashReducer","dispatch","CALL_IN_PROGRESS","joinGroupCall","hostSocketId","roomId","peerId","streamId","connectToNewUser","data","leaveGroupCall","clearGroupData","destroy","removeInactiveSteam","filter"],"mappings":"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","sourcesContent":["import { callStates, setCallState, setGroupCallActive, setGroupCallStream, clearGroupCallData} from \"../../store/actions/call\";\nimport store from \"../../store/store\";\nimport { registerGroupCall, userLeftGroupCall, userWantsToJoinGroupCall, closeGroupCallByHost } from \"../wssConnection/wssConnection\";\n\nlet mypeer;\nlet peerID;\nlet groupCallRoomId;\nlet groupCallHost = false;\n\nexport const connectWithPeer = () => {\n    mypeer = new window.Peer(undefined, {\n        path: '/peerjs',\n        host: '/',\n        port: '5000'\n    });\n\n    mypeer.on('open', (id) => {\n        peerID = id;\n        console.log(`Succesfully connected with peer server with id: ${id}`);\n    });\n\n    mypeer.on('call', (call) => {\n        call.answer(getLocalStream());\n        call.on('stream', incomingStream => {\n            console.log('Stream inconing', {incomingStream});\n            const streams = store.getState().call.groupStreams;\n            const stream = streams.find(stream => stream.id === incomingStream.id);\n            console.log({stream}, 'peer call');\n            if (!stream) {\n                addVideoStream(incomingStream)\n            }\n        });\n    });\n};\n\nconst getLocalStream = () => {\n    return store.getState().call.localStream;\n};\n\nexport const createGroupCall = () => {\n    groupCallHost = true;\n    registerGroupCall({\n        username: store.getState().dashReducer.username,\n        id: peerID\n    });\n    store.dispatch(setGroupCallActive(true));\n    store.dispatch(setCallState(callStates.CALL_IN_PROGRESS));\n};\n\nexport const joinGroupCall = (hostSocketId, roomId) => {\n    const localStream = getLocalStream();\n    groupCallRoomId = roomId;\n    userWantsToJoinGroupCall({\n        peerId: peerID,\n        hostSocketId,\n        roomId,\n        streamId: localStream.id\n    });\n    store.dispatch(setGroupCallActive(true));\n    store.dispatch(setCallState(callStates.CALL_IN_PROGRESS));\n};\n\nexport const connectToNewUser = (data) => {\n    const localStream = getLocalStream();\n    const call = mypeer.call(data.peerId, localStream);\n\n    call.on('stream', (incomingStream) => {\n        console.log({incomingStream});\n       const streams = store.getState().call.groupStreams;\n       const stream = streams.find(stream => stream.id === incomingStream.id);\n       console.log({stream}, 'call');\n        if (!stream) {\n            addVideoStream(incomingStream);\n        }\n    });\n};\n\nexport const leaveGroupCall = () => {\n    if (groupCallHost) {\n        closeGroupCallByHost({\n            peerId: peerID\n        });\n    } else {\n        userLeftGroupCall({\n            streamId: store.getState().call.localStream.id,\n            roomId: groupCallRoomId\n        });\n    }\n    clearGroupData();\n};\n\nexport const clearGroupData = () => {\n    groupCallRoomId = null;\n    groupCallHost = null;\n    store.dispatch(clearGroupCallData());\n    mypeer.destroy();\n    connectWithPeer();\n}\n\nexport const removeInactiveSteam = (data) => {\n    const groupStreams = store.getState().call.groupStreams.filter(stream => stream.id !== data.streamId);\n    store.dispatch(setGroupCallStream(groupStreams))\n};\n\nconst addVideoStream = (incomingStream) => {\n    let groupStreams = [\n        ...store.getState().call.groupStreams,\n        incomingStream\n    ];\n    store.dispatch(setGroupCallStream(groupStreams))\n};\n\n"]},"metadata":{},"sourceType":"module"}