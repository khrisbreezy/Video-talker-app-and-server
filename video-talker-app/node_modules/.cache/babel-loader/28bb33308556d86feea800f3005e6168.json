{"ast":null,"code":"import { callStates, setCallState, setGroupCallActive } from \"../../store/actions/call\";\nimport store from \"../../store/store\";\nimport { registerGroupCall, userWantsToJoinGroupCall } from \"../wssConnection/wssConnection\";\nlet mypeer;\nlet peerID;\nexport const connectWithPeer = () => {\n  mypeer = new window.Peer(undefined, {\n    path: '/peerjs',\n    host: '/',\n    port: '5000'\n  });\n  mypeer.on('open', id => {\n    peerID = id;\n    console.log(`Succesfully connected with peer server with id: ${id}`);\n  });\n  mypeer.on('call', call => {\n    call.answer(getLocalStream());\n    call.on('stream', incomingStream => {\n      console.log('Stream inconing');\n    });\n  });\n};\n\nconst getLocalStream = () => {\n  return store.getState().call.localStream;\n};\n\nexport const createGroupCall = () => {\n  registerGroupCall({\n    username: store.getState().dashReducer.username,\n    id: peerID\n  });\n  store.dispatch(setGroupCallActive(true));\n  store.dispatch(setCallState(callStates.CALL_IN_PROGRESS));\n};\nexport const joinGroupCall = (hostSocketId, roomId) => {\n  const localStream = getLocalStream();\n  userWantsToJoinGroupCall({\n    peerId: peerID,\n    hostSocketId,\n    roomId,\n    streamId: localStream.id\n  });\n  store.dispatch(setGroupCallActive(true));\n  store.dispatch(setCallState(callStates.CALL_IN_PROGRESS));\n};\nexport const connectToNewUser = data => {\n  const localStream = getLocalStream();\n  const call = mypeer.call(data.peerId, localStream);\n  call.on('stream', incomingStream => {\n    console.log('Incoming stream');\n  });\n};","map":{"version":3,"sources":["/Users/macuser/Desktop/Sites/React-Projects/VideoTalker/video-talker-app/src/utils/webRTC/webRTCGroupCallHandler.js"],"names":["callStates","setCallState","setGroupCallActive","store","registerGroupCall","userWantsToJoinGroupCall","mypeer","peerID","connectWithPeer","window","Peer","undefined","path","host","port","on","id","console","log","call","answer","getLocalStream","incomingStream","getState","localStream","createGroupCall","username","dashReducer","dispatch","CALL_IN_PROGRESS","joinGroupCall","hostSocketId","roomId","peerId","streamId","connectToNewUser","data"],"mappings":"AAAA,SAASA,UAAT,EAAqBC,YAArB,EAAmCC,kBAAnC,QAA6D,0BAA7D;AACA,OAAOC,KAAP,MAAkB,mBAAlB;AACA,SAASC,iBAAT,EAA4BC,wBAA5B,QAA4D,gCAA5D;AAEA,IAAIC,MAAJ;AACA,IAAIC,MAAJ;AAEA,OAAO,MAAMC,eAAe,GAAG,MAAM;AACjCF,EAAAA,MAAM,GAAG,IAAIG,MAAM,CAACC,IAAX,CAAgBC,SAAhB,EAA2B;AAChCC,IAAAA,IAAI,EAAE,SAD0B;AAEhCC,IAAAA,IAAI,EAAE,GAF0B;AAGhCC,IAAAA,IAAI,EAAE;AAH0B,GAA3B,CAAT;AAMAR,EAAAA,MAAM,CAACS,EAAP,CAAU,MAAV,EAAmBC,EAAD,IAAQ;AACtBT,IAAAA,MAAM,GAAGS,EAAT;AACAC,IAAAA,OAAO,CAACC,GAAR,CAAa,mDAAkDF,EAAG,EAAlE;AACH,GAHD;AAKAV,EAAAA,MAAM,CAACS,EAAP,CAAU,MAAV,EAAmBI,IAAD,IAAU;AACxBA,IAAAA,IAAI,CAACC,MAAL,CAAYC,cAAc,EAA1B;AACAF,IAAAA,IAAI,CAACJ,EAAL,CAAQ,QAAR,EAAkBO,cAAc,IAAI;AAChCL,MAAAA,OAAO,CAACC,GAAR,CAAY,iBAAZ;AACH,KAFD;AAGH,GALD;AAMH,CAlBM;;AAoBP,MAAMG,cAAc,GAAG,MAAM;AACzB,SAAOlB,KAAK,CAACoB,QAAN,GAAiBJ,IAAjB,CAAsBK,WAA7B;AACH,CAFD;;AAIA,OAAO,MAAMC,eAAe,GAAG,MAAM;AACjCrB,EAAAA,iBAAiB,CAAC;AACdsB,IAAAA,QAAQ,EAAEvB,KAAK,CAACoB,QAAN,GAAiBI,WAAjB,CAA6BD,QADzB;AAEdV,IAAAA,EAAE,EAAET;AAFU,GAAD,CAAjB;AAIAJ,EAAAA,KAAK,CAACyB,QAAN,CAAe1B,kBAAkB,CAAC,IAAD,CAAjC;AACAC,EAAAA,KAAK,CAACyB,QAAN,CAAe3B,YAAY,CAACD,UAAU,CAAC6B,gBAAZ,CAA3B;AACH,CAPM;AASP,OAAO,MAAMC,aAAa,GAAG,CAACC,YAAD,EAAeC,MAAf,KAA0B;AACnD,QAAMR,WAAW,GAAGH,cAAc,EAAlC;AACAhB,EAAAA,wBAAwB,CAAC;AACrB4B,IAAAA,MAAM,EAAE1B,MADa;AAErBwB,IAAAA,YAFqB;AAGrBC,IAAAA,MAHqB;AAIrBE,IAAAA,QAAQ,EAAEV,WAAW,CAACR;AAJD,GAAD,CAAxB;AAMAb,EAAAA,KAAK,CAACyB,QAAN,CAAe1B,kBAAkB,CAAC,IAAD,CAAjC;AACAC,EAAAA,KAAK,CAACyB,QAAN,CAAe3B,YAAY,CAACD,UAAU,CAAC6B,gBAAZ,CAA3B;AACH,CAVM;AAYP,OAAO,MAAMM,gBAAgB,GAAIC,IAAD,IAAU;AACtC,QAAMZ,WAAW,GAAGH,cAAc,EAAlC;AACA,QAAMF,IAAI,GAAGb,MAAM,CAACa,IAAP,CAAYiB,IAAI,CAACH,MAAjB,EAAyBT,WAAzB,CAAb;AAEAL,EAAAA,IAAI,CAACJ,EAAL,CAAQ,QAAR,EAAmBO,cAAD,IAAoB;AAClCL,IAAAA,OAAO,CAACC,GAAR,CAAY,iBAAZ;AACH,GAFD;AAGH,CAPM","sourcesContent":["import { callStates, setCallState, setGroupCallActive } from \"../../store/actions/call\";\nimport store from \"../../store/store\";\nimport { registerGroupCall, userWantsToJoinGroupCall } from \"../wssConnection/wssConnection\";\n\nlet mypeer;\nlet peerID;\n\nexport const connectWithPeer = () => {\n    mypeer = new window.Peer(undefined, {\n        path: '/peerjs',\n        host: '/',\n        port: '5000'\n    });\n\n    mypeer.on('open', (id) => {\n        peerID = id;\n        console.log(`Succesfully connected with peer server with id: ${id}`);\n    });\n\n    mypeer.on('call', (call) => {\n        call.answer(getLocalStream());\n        call.on('stream', incomingStream => {\n            console.log('Stream inconing');\n        });\n    });\n};\n\nconst getLocalStream = () => {\n    return store.getState().call.localStream;\n};\n\nexport const createGroupCall = () => {\n    registerGroupCall({\n        username: store.getState().dashReducer.username,\n        id: peerID\n    });\n    store.dispatch(setGroupCallActive(true));\n    store.dispatch(setCallState(callStates.CALL_IN_PROGRESS));\n};\n\nexport const joinGroupCall = (hostSocketId, roomId) => {\n    const localStream = getLocalStream();\n    userWantsToJoinGroupCall({\n        peerId: peerID,\n        hostSocketId,\n        roomId,\n        streamId: localStream.id\n    });\n    store.dispatch(setGroupCallActive(true));\n    store.dispatch(setCallState(callStates.CALL_IN_PROGRESS));\n};\n\nexport const connectToNewUser = (data) => {\n    const localStream = getLocalStream();\n    const call = mypeer.call(data.peerId, localStream);\n\n    call.on('stream', (incomingStream) => {\n        console.log('Incoming stream');\n    });\n};\n\n"]},"metadata":{},"sourceType":"module"}