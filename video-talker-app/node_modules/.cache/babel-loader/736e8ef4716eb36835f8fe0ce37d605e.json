{"ast":null,"code":"var _jsxFileName = \"/Users/macuser/Desktop/Sites/React-Projects/VideoTalker/video-talker-app/src/Dashboard/components/RemoteVideoView/RemoteVideoView.js\",\n    _s = $RefreshSig$();\n\nimport React, { useRef, useEffect } from 'react';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst styles = {\n  videoContainer: {\n    width: '100%',\n    height: '100%'\n  },\n  videoElement: {\n    width: '100%',\n    height: '100%'\n  }\n};\n\nconst LocalVideoView = props => {\n  _s();\n\n  const {\n    remoteStream\n  } = props;\n  const remoteVideoRef = useRef();\n  useEffect(() => {\n    if (remoteStream) {\n      const remoteVideo = remoteVideoRef.current;\n      remoteVideo.srcObject = remoteStream;\n\n      remoteVideo.onloadedmetadata = () => {\n        remoteVideo.play();\n      };\n    }\n  }, [remoteStream]);\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    style: styles.videoContainer,\n    children: /*#__PURE__*/_jsxDEV(\"video\", {\n      style: styles.videoElement,\n      ref: remoteVideoRef,\n      autoPlay: true\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 31,\n      columnNumber: 7\n    }, this)\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 30,\n    columnNumber: 5\n  }, this);\n};\n\n_s(LocalVideoView, \"ZGBB4g5jJPO2ACcyUYACJAVisSQ=\");\n\n_c = LocalVideoView;\nexport default LocalVideoView;\n\nvar _c;\n\n$RefreshReg$(_c, \"LocalVideoView\");","map":{"version":3,"sources":["/Users/macuser/Desktop/Sites/React-Projects/VideoTalker/video-talker-app/src/Dashboard/components/RemoteVideoView/RemoteVideoView.js"],"names":["React","useRef","useEffect","styles","videoContainer","width","height","videoElement","LocalVideoView","props","remoteStream","remoteVideoRef","remoteVideo","current","srcObject","onloadedmetadata","play"],"mappings":";;;AAAA,OAAOA,KAAP,IAAgBC,MAAhB,EAAwBC,SAAxB,QAAyC,OAAzC;;AAEA,MAAMC,MAAM,GAAG;AACbC,EAAAA,cAAc,EAAE;AACdC,IAAAA,KAAK,EAAE,MADO;AAEdC,IAAAA,MAAM,EAAE;AAFM,GADH;AAKbC,EAAAA,YAAY,EAAE;AACZF,IAAAA,KAAK,EAAE,MADK;AAEZC,IAAAA,MAAM,EAAE;AAFI;AALD,CAAf;;AAWA,MAAME,cAAc,GAAGC,KAAK,IAAI;AAAA;;AAC9B,QAAM;AAAEC,IAAAA;AAAF,MAAmBD,KAAzB;AACA,QAAME,cAAc,GAAGV,MAAM,EAA7B;AAEAC,EAAAA,SAAS,CAAC,MAAM;AACd,QAAIQ,YAAJ,EAAkB;AAChB,YAAME,WAAW,GAAGD,cAAc,CAACE,OAAnC;AACAD,MAAAA,WAAW,CAACE,SAAZ,GAAwBJ,YAAxB;;AAEAE,MAAAA,WAAW,CAACG,gBAAZ,GAA+B,MAAM;AACnCH,QAAAA,WAAW,CAACI,IAAZ;AACD,OAFD;AAGD;AACF,GATQ,EASN,CAACN,YAAD,CATM,CAAT;AAWA,sBACE;AAAK,IAAA,KAAK,EAAEP,MAAM,CAACC,cAAnB;AAAA,2BACE;AAAO,MAAA,KAAK,EAAED,MAAM,CAACI,YAArB;AAAmC,MAAA,GAAG,EAAEI,cAAxC;AAAwD,MAAA,QAAQ;AAAhE;AAAA;AAAA;AAAA;AAAA;AADF;AAAA;AAAA;AAAA;AAAA,UADF;AAKD,CApBD;;GAAMH,c;;KAAAA,c;AAsBN,eAAeA,cAAf","sourcesContent":["import React, { useRef, useEffect } from 'react';\n\nconst styles = {\n  videoContainer: {\n    width: '100%',\n    height: '100%'\n  },\n  videoElement: {\n    width: '100%',\n    height: '100%'\n  }\n};\n\nconst LocalVideoView = props => {\n  const { remoteStream } = props;\n  const remoteVideoRef = useRef();\n\n  useEffect(() => {\n    if (remoteStream) {\n      const remoteVideo = remoteVideoRef.current;\n      remoteVideo.srcObject = remoteStream;\n\n      remoteVideo.onloadedmetadata = () => {\n        remoteVideo.play();\n      };\n    }\n  }, [remoteStream]);\n\n  return (\n    <div style={styles.videoContainer}>\n      <video style={styles.videoElement} ref={remoteVideoRef} autoPlay />\n    </div>\n  );\n};\n\nexport default LocalVideoView;\n"]},"metadata":{},"sourceType":"module"}