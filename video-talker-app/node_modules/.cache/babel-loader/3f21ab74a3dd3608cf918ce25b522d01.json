{"ast":null,"code":"import socketClient from 'socket.io-client';\nimport store from '../../store/store';\nimport { saveActiveUsers } from '../../store/actions/dashboard';\nimport { handlePreoffer } from '../webRTC/webRTCHandler';\nconst SERVER = 'http://localhost:5000';\nlet socket;\nconst broadcastEventTypes = {\n  ACTIVE_USERS: 'ACTIVE_USERS',\n  GROUP_CALL_ROOMS: 'GROUP_CALL_ROOMS'\n};\nexport const connectWithWebSocket = () => {\n  socket = socketClient(SERVER);\n  socket.on('connection', () => {\n    console.log('Successful connection');\n    console.log(socket.id);\n  });\n  socket.on('broadcast', data => {\n    handleBroadcastEvents(data);\n  }); // Listeners realated to direct call\n\n  socket.on('pre-offer', data => {\n    handlePreoffer(data);\n  }); // Listeners for call answers\n\n  socket.on('pre-offer-answer', data => {});\n};\nexport const registerNewUser = username => {\n  socket.emit('register-new-user', {\n    username: username,\n    socketId: socket.id\n  });\n};\n\nconst handleBroadcastEvents = data => {\n  switch (data.event) {\n    case broadcastEventTypes.ACTIVE_USERS:\n      const activeUsers = data.activeUsers.filter(activeUser => activeUser.socketId !== socket.id);\n      store.dispatch(saveActiveUsers(activeUsers));\n      break;\n\n    default:\n      return;\n  }\n}; // Emitting events to the server related to direct calling\n\n\nexport const sendPreOffer = data => {\n  socket.emit('pre-offer', data);\n};\nexport const sendPreOfferAnswer = data => {\n  socket.emit('pre-offer-answer', data);\n};","map":{"version":3,"sources":["/Users/macuser/Desktop/Sites/React-Projects/VideoTalker/video-talker-app/src/utils/wssConnection/wssConnection.js"],"names":["socketClient","store","saveActiveUsers","handlePreoffer","SERVER","socket","broadcastEventTypes","ACTIVE_USERS","GROUP_CALL_ROOMS","connectWithWebSocket","on","console","log","id","data","handleBroadcastEvents","registerNewUser","username","emit","socketId","event","activeUsers","filter","activeUser","dispatch","sendPreOffer","sendPreOfferAnswer"],"mappings":"AAAA,OAAOA,YAAP,MAAyB,kBAAzB;AACA,OAAOC,KAAP,MAAkB,mBAAlB;AACA,SAASC,eAAT,QAAgC,+BAAhC;AACA,SAASC,cAAT,QAA+B,yBAA/B;AAEA,MAAMC,MAAM,GAAG,uBAAf;AAEA,IAAIC,MAAJ;AAEA,MAAMC,mBAAmB,GAAG;AACxBC,EAAAA,YAAY,EAAE,cADU;AAExBC,EAAAA,gBAAgB,EAAE;AAFM,CAA5B;AAKA,OAAO,MAAMC,oBAAoB,GAAG,MAAM;AACtCJ,EAAAA,MAAM,GAAGL,YAAY,CAACI,MAAD,CAArB;AAEAC,EAAAA,MAAM,CAACK,EAAP,CAAU,YAAV,EAAwB,MAAM;AAC1BC,IAAAA,OAAO,CAACC,GAAR,CAAY,uBAAZ;AACAD,IAAAA,OAAO,CAACC,GAAR,CAAYP,MAAM,CAACQ,EAAnB;AACH,GAHD;AAKAR,EAAAA,MAAM,CAACK,EAAP,CAAU,WAAV,EAAwBI,IAAD,IAAU;AAC9BC,IAAAA,qBAAqB,CAACD,IAAD,CAArB;AACF,GAFD,EARsC,CAYtC;;AACAT,EAAAA,MAAM,CAACK,EAAP,CAAU,WAAV,EAAwBI,IAAD,IAAU;AAC7BX,IAAAA,cAAc,CAACW,IAAD,CAAd;AACH,GAFD,EAbsC,CAiBtC;;AACAT,EAAAA,MAAM,CAACK,EAAP,CAAU,kBAAV,EAA+BI,IAAD,IAAU,CAEvC,CAFD;AAGH,CArBM;AAuBP,OAAO,MAAME,eAAe,GAAIC,QAAD,IAAc;AACzCZ,EAAAA,MAAM,CAACa,IAAP,CAAY,mBAAZ,EAAiC;AAC7BD,IAAAA,QAAQ,EAAEA,QADmB;AAE7BE,IAAAA,QAAQ,EAAEd,MAAM,CAACQ;AAFY,GAAjC;AAIH,CALM;;AAOP,MAAME,qBAAqB,GAAID,IAAD,IAAU;AACpC,UAAQA,IAAI,CAACM,KAAb;AACI,SAAKd,mBAAmB,CAACC,YAAzB;AACI,YAAMc,WAAW,GAAGP,IAAI,CAACO,WAAL,CAAiBC,MAAjB,CAAwBC,UAAU,IAAIA,UAAU,CAACJ,QAAX,KAAwBd,MAAM,CAACQ,EAArE,CAApB;AACAZ,MAAAA,KAAK,CAACuB,QAAN,CAAetB,eAAe,CAACmB,WAAD,CAA9B;AACA;;AACJ;AAAS;AALb;AAOH,CARD,C,CAUA;;;AACA,OAAO,MAAMI,YAAY,GAAIX,IAAD,IAAU;AAClCT,EAAAA,MAAM,CAACa,IAAP,CAAY,WAAZ,EAAyBJ,IAAzB;AACH,CAFM;AAIP,OAAO,MAAMY,kBAAkB,GAAIZ,IAAD,IAAU;AACxCT,EAAAA,MAAM,CAACa,IAAP,CAAY,kBAAZ,EAAgCJ,IAAhC;AACH,CAFM","sourcesContent":["import socketClient from 'socket.io-client';\nimport store from '../../store/store';\nimport { saveActiveUsers } from '../../store/actions/dashboard';\nimport { handlePreoffer } from '../webRTC/webRTCHandler';\n\nconst SERVER = 'http://localhost:5000';\n\nlet socket;\n\nconst broadcastEventTypes = {\n    ACTIVE_USERS: 'ACTIVE_USERS',\n    GROUP_CALL_ROOMS: 'GROUP_CALL_ROOMS'\n}\n\nexport const connectWithWebSocket = () => {\n    socket = socketClient(SERVER);\n\n    socket.on('connection', () => {\n        console.log('Successful connection');\n        console.log(socket.id);\n    });\n\n    socket.on('broadcast', (data) => {\n       handleBroadcastEvents(data);\n    });\n\n    // Listeners realated to direct call\n    socket.on('pre-offer', (data) => {\n        handlePreoffer(data);\n    });\n\n    // Listeners for call answers\n    socket.on('pre-offer-answer', (data) => {\n\n    })\n};\n\nexport const registerNewUser = (username) => {\n    socket.emit('register-new-user', {\n        username: username,\n        socketId: socket.id\n    })\n};\n\nconst handleBroadcastEvents = (data) => {\n    switch (data.event) {\n        case broadcastEventTypes.ACTIVE_USERS:\n            const activeUsers = data.activeUsers.filter(activeUser => activeUser.socketId !== socket.id);\n            store.dispatch(saveActiveUsers(activeUsers));\n            break;\n        default: return;\n    }\n};\n\n// Emitting events to the server related to direct calling\nexport const sendPreOffer = (data) => {\n    socket.emit('pre-offer', data);\n};\n\nexport const sendPreOfferAnswer = (data) => {\n    socket.emit('pre-offer-answer', data);\n};"]},"metadata":{},"sourceType":"module"}