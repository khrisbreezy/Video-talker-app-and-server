{"ast":null,"code":"import socketClient from 'socket.io-client';\nimport store from '../../store/store';\nimport { saveActiveRooms, saveActiveUsers } from '../../store/actions/dashboard';\nimport { handlePreoffer, handlePreofferAnswer, handleOffer, handleAnswer, handleCandidate, handleUserHangedUp } from '../webRTC/webRTCHandler';\nconst SERVER = 'http://localhost:5000';\nlet socket;\nconst broadcastEventTypes = {\n  ACTIVE_USERS: 'ACTIVE_USERS',\n  GROUP_CALL_ROOMS: 'GROUP_CALL_ROOMS'\n};\nexport const connectWithWebSocket = () => {\n  socket = socketClient(SERVER);\n  socket.on('connection', () => {\n    console.log('Successful connection');\n    console.log(socket.id);\n  });\n  socket.on('broadcast', data => {\n    handleBroadcastEvents(data);\n  }); // Event Listeners realated to direct call\n\n  socket.on('pre-offer', data => {\n    handlePreoffer(data);\n  }); // Event Listeners for call answers\n\n  socket.on('pre-offer-answer', data => {\n    handlePreofferAnswer(data);\n  }); // Event Listeners for WebRTCOffer\n\n  socket.on('webRTC-offer', data => {\n    handleOffer(data);\n  }); // Event Listeners for WebRTCAnswer\n\n  socket.on('webRTC-answer', data => {\n    handleAnswer(data);\n  }); // Event Listeners for ice candidate\n\n  socket.on('webRTC-candidate', data => {\n    handleCandidate(data);\n  }); // Event listeners for user hangup\n\n  socket.on('user-hanged-up', () => {\n    handleUserHangedUp();\n  });\n};\nexport const registerNewUser = username => {\n  socket.emit('register-new-user', {\n    username: username,\n    socketId: socket.id\n  });\n};\n\nconst handleBroadcastEvents = data => {\n  switch (data.event) {\n    case broadcastEventTypes.ACTIVE_USERS:\n      const activeUsers = data.activeUsers.filter(activeUser => activeUser.socketId !== socket.id);\n      store.dispatch(saveActiveUsers(activeUsers));\n      break;\n\n    case broadcastEventTypes.GROUP_CALL_ROOMS:\n      store.dispatch(saveActiveRooms(data.groupRoomd));\n\n    default:\n      return;\n  }\n}; // Emitting events to the server related to direct calling\n\n\nexport const sendPreOffer = data => {\n  socket.emit('pre-offer', data);\n};\nexport const sendPreOfferAnswer = data => {\n  socket.emit('pre-offer-answer', data);\n};\nexport const sendWebRTCOffer = data => {\n  socket.emit('webRTC-offer', data);\n};\nexport const sendWebRTCAnswer = data => {\n  socket.emit('webRTC-answer', data);\n};\nexport const sendWebRTCCandidate = data => {\n  socket.emit('webRTC-candidate', data);\n};\nexport const sendUserHangUp = data => {\n  socket.emit('user-hanged-up', data);\n}; // Emitting events to the server related to group calling\n\nexport const registerGroupCall = data => {\n  socket.emit('reg-group-call', data);\n};","map":{"version":3,"sources":["/Users/macuser/Desktop/Sites/React-Projects/VideoTalker/video-talker-app/src/utils/wssConnection/wssConnection.js"],"names":["socketClient","store","saveActiveRooms","saveActiveUsers","handlePreoffer","handlePreofferAnswer","handleOffer","handleAnswer","handleCandidate","handleUserHangedUp","SERVER","socket","broadcastEventTypes","ACTIVE_USERS","GROUP_CALL_ROOMS","connectWithWebSocket","on","console","log","id","data","handleBroadcastEvents","registerNewUser","username","emit","socketId","event","activeUsers","filter","activeUser","dispatch","groupRoomd","sendPreOffer","sendPreOfferAnswer","sendWebRTCOffer","sendWebRTCAnswer","sendWebRTCCandidate","sendUserHangUp","registerGroupCall"],"mappings":"AAAA,OAAOA,YAAP,MAAyB,kBAAzB;AACA,OAAOC,KAAP,MAAkB,mBAAlB;AACA,SAASC,eAAT,EAA0BC,eAA1B,QAAiD,+BAAjD;AACA,SAASC,cAAT,EAAyBC,oBAAzB,EAA+CC,WAA/C,EAA4DC,YAA5D,EAA0EC,eAA1E,EAA2FC,kBAA3F,QAAqH,yBAArH;AAEA,MAAMC,MAAM,GAAG,uBAAf;AAEA,IAAIC,MAAJ;AAEA,MAAMC,mBAAmB,GAAG;AACxBC,EAAAA,YAAY,EAAE,cADU;AAExBC,EAAAA,gBAAgB,EAAE;AAFM,CAA5B;AAKA,OAAO,MAAMC,oBAAoB,GAAG,MAAM;AACtCJ,EAAAA,MAAM,GAAGX,YAAY,CAACU,MAAD,CAArB;AAEAC,EAAAA,MAAM,CAACK,EAAP,CAAU,YAAV,EAAwB,MAAM;AAC1BC,IAAAA,OAAO,CAACC,GAAR,CAAY,uBAAZ;AACAD,IAAAA,OAAO,CAACC,GAAR,CAAYP,MAAM,CAACQ,EAAnB;AACH,GAHD;AAKAR,EAAAA,MAAM,CAACK,EAAP,CAAU,WAAV,EAAwBI,IAAD,IAAU;AAC9BC,IAAAA,qBAAqB,CAACD,IAAD,CAArB;AACF,GAFD,EARsC,CAYtC;;AACAT,EAAAA,MAAM,CAACK,EAAP,CAAU,WAAV,EAAwBI,IAAD,IAAU;AAC7BhB,IAAAA,cAAc,CAACgB,IAAD,CAAd;AACH,GAFD,EAbsC,CAiBtC;;AACAT,EAAAA,MAAM,CAACK,EAAP,CAAU,kBAAV,EAA+BI,IAAD,IAAU;AACpCf,IAAAA,oBAAoB,CAACe,IAAD,CAApB;AACH,GAFD,EAlBsC,CAsBtC;;AACAT,EAAAA,MAAM,CAACK,EAAP,CAAU,cAAV,EAA2BI,IAAD,IAAU;AAChCd,IAAAA,WAAW,CAACc,IAAD,CAAX;AACH,GAFD,EAvBsC,CA2BtC;;AACAT,EAAAA,MAAM,CAACK,EAAP,CAAU,eAAV,EAA4BI,IAAD,IAAU;AACjCb,IAAAA,YAAY,CAACa,IAAD,CAAZ;AACH,GAFD,EA5BsC,CAgCtC;;AACAT,EAAAA,MAAM,CAACK,EAAP,CAAU,kBAAV,EAA+BI,IAAD,IAAU;AACpCZ,IAAAA,eAAe,CAACY,IAAD,CAAf;AACH,GAFD,EAjCsC,CAqCtC;;AACAT,EAAAA,MAAM,CAACK,EAAP,CAAU,gBAAV,EAA4B,MAAM;AAC9BP,IAAAA,kBAAkB;AACrB,GAFD;AAIH,CA1CM;AA4CP,OAAO,MAAMa,eAAe,GAAIC,QAAD,IAAc;AACzCZ,EAAAA,MAAM,CAACa,IAAP,CAAY,mBAAZ,EAAiC;AAC7BD,IAAAA,QAAQ,EAAEA,QADmB;AAE7BE,IAAAA,QAAQ,EAAEd,MAAM,CAACQ;AAFY,GAAjC;AAIH,CALM;;AAOP,MAAME,qBAAqB,GAAID,IAAD,IAAU;AACpC,UAAQA,IAAI,CAACM,KAAb;AACI,SAAKd,mBAAmB,CAACC,YAAzB;AACI,YAAMc,WAAW,GAAGP,IAAI,CAACO,WAAL,CAAiBC,MAAjB,CAAwBC,UAAU,IAAIA,UAAU,CAACJ,QAAX,KAAwBd,MAAM,CAACQ,EAArE,CAApB;AACAlB,MAAAA,KAAK,CAAC6B,QAAN,CAAe3B,eAAe,CAACwB,WAAD,CAA9B;AACA;;AACJ,SAAKf,mBAAmB,CAACE,gBAAzB;AACIb,MAAAA,KAAK,CAAC6B,QAAN,CAAe5B,eAAe,CAACkB,IAAI,CAACW,UAAN,CAA9B;;AACJ;AAAS;AAPb;AASH,CAVD,C,CAYA;;;AACA,OAAO,MAAMC,YAAY,GAAIZ,IAAD,IAAU;AAClCT,EAAAA,MAAM,CAACa,IAAP,CAAY,WAAZ,EAAyBJ,IAAzB;AACH,CAFM;AAIP,OAAO,MAAMa,kBAAkB,GAAIb,IAAD,IAAU;AACxCT,EAAAA,MAAM,CAACa,IAAP,CAAY,kBAAZ,EAAgCJ,IAAhC;AACH,CAFM;AAIP,OAAO,MAAMc,eAAe,GAAId,IAAD,IAAU;AACrCT,EAAAA,MAAM,CAACa,IAAP,CAAY,cAAZ,EAA4BJ,IAA5B;AACH,CAFM;AAIP,OAAO,MAAMe,gBAAgB,GAAIf,IAAD,IAAU;AACtCT,EAAAA,MAAM,CAACa,IAAP,CAAY,eAAZ,EAA6BJ,IAA7B;AACH,CAFM;AAIP,OAAO,MAAMgB,mBAAmB,GAAIhB,IAAD,IAAU;AACzCT,EAAAA,MAAM,CAACa,IAAP,CAAY,kBAAZ,EAAgCJ,IAAhC;AACH,CAFM;AAIP,OAAO,MAAMiB,cAAc,GAAIjB,IAAD,IAAU;AACpCT,EAAAA,MAAM,CAACa,IAAP,CAAY,gBAAZ,EAA8BJ,IAA9B;AACH,CAFM,C,CAKP;;AACA,OAAO,MAAMkB,iBAAiB,GAAIlB,IAAD,IAAU;AACvCT,EAAAA,MAAM,CAACa,IAAP,CAAY,gBAAZ,EAA8BJ,IAA9B;AACH,CAFM","sourcesContent":["import socketClient from 'socket.io-client';\nimport store from '../../store/store';\nimport { saveActiveRooms, saveActiveUsers } from '../../store/actions/dashboard';\nimport { handlePreoffer, handlePreofferAnswer, handleOffer, handleAnswer, handleCandidate, handleUserHangedUp } from '../webRTC/webRTCHandler';\n\nconst SERVER = 'http://localhost:5000';\n\nlet socket;\n\nconst broadcastEventTypes = {\n    ACTIVE_USERS: 'ACTIVE_USERS',\n    GROUP_CALL_ROOMS: 'GROUP_CALL_ROOMS'\n}\n\nexport const connectWithWebSocket = () => {\n    socket = socketClient(SERVER);\n\n    socket.on('connection', () => {\n        console.log('Successful connection');\n        console.log(socket.id);\n    });\n\n    socket.on('broadcast', (data) => {\n       handleBroadcastEvents(data);\n    });\n\n    // Event Listeners realated to direct call\n    socket.on('pre-offer', (data) => {\n        handlePreoffer(data);\n    });\n\n    // Event Listeners for call answers\n    socket.on('pre-offer-answer', (data) => {\n        handlePreofferAnswer(data);\n    });\n\n    // Event Listeners for WebRTCOffer\n    socket.on('webRTC-offer', (data) => {\n        handleOffer(data);\n    });\n\n    // Event Listeners for WebRTCAnswer\n    socket.on('webRTC-answer', (data) => {\n        handleAnswer(data)\n    });\n\n    // Event Listeners for ice candidate\n    socket.on('webRTC-candidate', (data) => {\n        handleCandidate(data);\n    });\n\n    // Event listeners for user hangup\n    socket.on('user-hanged-up', () => {\n        handleUserHangedUp();\n    });\n\n};\n\nexport const registerNewUser = (username) => {\n    socket.emit('register-new-user', {\n        username: username,\n        socketId: socket.id\n    });\n};\n\nconst handleBroadcastEvents = (data) => {\n    switch (data.event) {\n        case broadcastEventTypes.ACTIVE_USERS:\n            const activeUsers = data.activeUsers.filter(activeUser => activeUser.socketId !== socket.id);\n            store.dispatch(saveActiveUsers(activeUsers));\n            break;\n        case broadcastEventTypes.GROUP_CALL_ROOMS:\n            store.dispatch(saveActiveRooms(data.groupRoomd))\n        default: return;\n    }\n};\n\n// Emitting events to the server related to direct calling\nexport const sendPreOffer = (data) => {\n    socket.emit('pre-offer', data);\n};\n\nexport const sendPreOfferAnswer = (data) => {\n    socket.emit('pre-offer-answer', data);\n};\n\nexport const sendWebRTCOffer = (data) => {\n    socket.emit('webRTC-offer', data);\n};\n\nexport const sendWebRTCAnswer = (data) => {\n    socket.emit('webRTC-answer', data);\n};\n\nexport const sendWebRTCCandidate = (data) => {\n    socket.emit('webRTC-candidate', data);\n};\n\nexport const sendUserHangUp = (data) => {\n    socket.emit('user-hanged-up', data);\n};\n\n\n// Emitting events to the server related to group calling\nexport const registerGroupCall = (data) => {\n    socket.emit('reg-group-call', data);\n};\n"]},"metadata":{},"sourceType":"module"}